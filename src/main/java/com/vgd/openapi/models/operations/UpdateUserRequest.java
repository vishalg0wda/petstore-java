/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.vgd.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.vgd.openapi.models.components.User;
import com.vgd.openapi.utils.SpeakeasyMetadata;
import com.vgd.openapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class UpdateUserRequest {

    /**
     * name that needs to be updated
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=username")
    private String username;

    /**
     * Update an existent user in the store
     */
    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends User> user;

    @JsonCreator
    public UpdateUserRequest(
            String username,
            Optional<? extends User> user) {
        Utils.checkNotNull(username, "username");
        Utils.checkNotNull(user, "user");
        this.username = username;
        this.user = user;
    }
    
    public UpdateUserRequest(
            String username) {
        this(username, Optional.empty());
    }

    /**
     * name that needs to be updated
     */
    @JsonIgnore
    public String username() {
        return username;
    }

    /**
     * Update an existent user in the store
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<User> user() {
        return (Optional<User>) user;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * name that needs to be updated
     */
    public UpdateUserRequest withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    /**
     * Update an existent user in the store
     */
    public UpdateUserRequest withUser(User user) {
        Utils.checkNotNull(user, "user");
        this.user = Optional.ofNullable(user);
        return this;
    }

    /**
     * Update an existent user in the store
     */
    public UpdateUserRequest withUser(Optional<? extends User> user) {
        Utils.checkNotNull(user, "user");
        this.user = user;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateUserRequest other = (UpdateUserRequest) o;
        return 
            Objects.deepEquals(this.username, other.username) &&
            Objects.deepEquals(this.user, other.user);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            username,
            user);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateUserRequest.class,
                "username", username,
                "user", user);
    }
    
    public final static class Builder {
 
        private String username;
 
        private Optional<? extends User> user = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * name that needs to be updated
         */
        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }

        /**
         * Update an existent user in the store
         */
        public Builder user(User user) {
            Utils.checkNotNull(user, "user");
            this.user = Optional.ofNullable(user);
            return this;
        }

        /**
         * Update an existent user in the store
         */
        public Builder user(Optional<? extends User> user) {
            Utils.checkNotNull(user, "user");
            this.user = user;
            return this;
        }
        
        public UpdateUserRequest build() {
            return new UpdateUserRequest(
                username,
                user);
        }
    }
}

