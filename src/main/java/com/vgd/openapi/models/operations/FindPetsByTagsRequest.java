/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.vgd.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.vgd.openapi.utils.SpeakeasyMetadata;
import com.vgd.openapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class FindPetsByTagsRequest {

    /**
     * Tags to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=tags")
    private Optional<? extends List<String>> tags;

    @JsonCreator
    public FindPetsByTagsRequest(
            Optional<? extends List<String>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
    }
    
    public FindPetsByTagsRequest() {
        this(Optional.empty());
    }

    /**
     * Tags to filter by
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> tags() {
        return (Optional<List<String>>) tags;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Tags to filter by
     */
    public FindPetsByTagsRequest withTags(List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = Optional.ofNullable(tags);
        return this;
    }

    /**
     * Tags to filter by
     */
    public FindPetsByTagsRequest withTags(Optional<? extends List<String>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FindPetsByTagsRequest other = (FindPetsByTagsRequest) o;
        return 
            Objects.deepEquals(this.tags, other.tags);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            tags);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FindPetsByTagsRequest.class,
                "tags", tags);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<String>> tags = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Tags to filter by
         */
        public Builder tags(List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        /**
         * Tags to filter by
         */
        public Builder tags(Optional<? extends List<String>> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }
        
        public FindPetsByTagsRequest build() {
            return new FindPetsByTagsRequest(
                tags);
        }
    }
}

