/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.vgd.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.vgd.openapi.utils.LazySingletonValue;
import com.vgd.openapi.utils.SpeakeasyMetadata;
import com.vgd.openapi.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class FindPetsByStatusRequest {

    /**
     * Status values that need to be considered for filter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=status")
    private Optional<? extends Status> status;

    @JsonCreator
    public FindPetsByStatusRequest(
            Optional<? extends Status> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
    }
    
    public FindPetsByStatusRequest() {
        this(Optional.empty());
    }

    /**
     * Status values that need to be considered for filter
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Status> status() {
        return (Optional<Status>) status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Status values that need to be considered for filter
     */
    public FindPetsByStatusRequest withStatus(Status status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Status values that need to be considered for filter
     */
    public FindPetsByStatusRequest withStatus(Optional<? extends Status> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FindPetsByStatusRequest other = (FindPetsByStatusRequest) o;
        return 
            Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FindPetsByStatusRequest.class,
                "status", status);
    }
    
    public final static class Builder {
 
        private Optional<? extends Status> status;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Status values that need to be considered for filter
         */
        public Builder status(Status status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Status values that need to be considered for filter
         */
        public Builder status(Optional<? extends Status> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public FindPetsByStatusRequest build() {
            if (status == null) {
                status = _SINGLETON_VALUE_Status.value();
            }            return new FindPetsByStatusRequest(
                status);
        }

        private static final LazySingletonValue<Optional<? extends Status>> _SINGLETON_VALUE_Status =
                new LazySingletonValue<>(
                        "status",
                        "\"available\"",
                        new TypeReference<Optional<? extends Status>>() {});
    }
}

