/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.vgd.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.vgd.openapi.utils.SpeakeasyMetadata;
import com.vgd.openapi.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class DeletePetRequest {

    @SpeakeasyMetadata("header:style=simple,explode=false,name=api_key")
    private Optional<String> apiKey;

    /**
     * Pet id to delete
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=petId")
    private long petId;

    @JsonCreator
    public DeletePetRequest(
            Optional<String> apiKey,
            long petId) {
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(petId, "petId");
        this.apiKey = apiKey;
        this.petId = petId;
    }
    
    public DeletePetRequest(
            long petId) {
        this(Optional.empty(), petId);
    }

    @JsonIgnore
    public Optional<String> apiKey() {
        return apiKey;
    }

    /**
     * Pet id to delete
     */
    @JsonIgnore
    public long petId() {
        return petId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DeletePetRequest withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = Optional.ofNullable(apiKey);
        return this;
    }

    public DeletePetRequest withApiKey(Optional<String> apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Pet id to delete
     */
    public DeletePetRequest withPetId(long petId) {
        Utils.checkNotNull(petId, "petId");
        this.petId = petId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeletePetRequest other = (DeletePetRequest) o;
        return 
            Objects.deepEquals(this.apiKey, other.apiKey) &&
            Objects.deepEquals(this.petId, other.petId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiKey,
            petId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DeletePetRequest.class,
                "apiKey", apiKey,
                "petId", petId);
    }
    
    public final static class Builder {
 
        private Optional<String> apiKey = Optional.empty();
 
        private Long petId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = Optional.ofNullable(apiKey);
            return this;
        }

        public Builder apiKey(Optional<String> apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * Pet id to delete
         */
        public Builder petId(long petId) {
            Utils.checkNotNull(petId, "petId");
            this.petId = petId;
            return this;
        }
        
        public DeletePetRequest build() {
            return new DeletePetRequest(
                apiKey,
                petId);
        }
    }
}

