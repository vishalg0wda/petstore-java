/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.vgd.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.vgd.openapi.utils.SpeakeasyMetadata;
import com.vgd.openapi.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class UploadFileRequest {

    /**
     * ID of pet to update
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=petId")
    private long petId;

    /**
     * Additional Metadata
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=additionalMetadata")
    private Optional<String> additionalMetadata;

    @SpeakeasyMetadata("request:mediaType=application/octet-stream")
    private Optional<? extends byte[]> requestBody;

    @JsonCreator
    public UploadFileRequest(
            long petId,
            Optional<String> additionalMetadata,
            Optional<? extends byte[]> requestBody) {
        Utils.checkNotNull(petId, "petId");
        Utils.checkNotNull(additionalMetadata, "additionalMetadata");
        Utils.checkNotNull(requestBody, "requestBody");
        this.petId = petId;
        this.additionalMetadata = additionalMetadata;
        this.requestBody = requestBody;
    }
    
    public UploadFileRequest(
            long petId) {
        this(petId, Optional.empty(), Optional.empty());
    }

    /**
     * ID of pet to update
     */
    @JsonIgnore
    public long petId() {
        return petId;
    }

    /**
     * Additional Metadata
     */
    @JsonIgnore
    public Optional<String> additionalMetadata() {
        return additionalMetadata;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<byte[]> requestBody() {
        return (Optional<byte[]>) requestBody;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * ID of pet to update
     */
    public UploadFileRequest withPetId(long petId) {
        Utils.checkNotNull(petId, "petId");
        this.petId = petId;
        return this;
    }

    /**
     * Additional Metadata
     */
    public UploadFileRequest withAdditionalMetadata(String additionalMetadata) {
        Utils.checkNotNull(additionalMetadata, "additionalMetadata");
        this.additionalMetadata = Optional.ofNullable(additionalMetadata);
        return this;
    }

    /**
     * Additional Metadata
     */
    public UploadFileRequest withAdditionalMetadata(Optional<String> additionalMetadata) {
        Utils.checkNotNull(additionalMetadata, "additionalMetadata");
        this.additionalMetadata = additionalMetadata;
        return this;
    }

    public UploadFileRequest withRequestBody(byte[] requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = Optional.ofNullable(requestBody);
        return this;
    }

    public UploadFileRequest withRequestBody(Optional<? extends byte[]> requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UploadFileRequest other = (UploadFileRequest) o;
        return 
            Objects.deepEquals(this.petId, other.petId) &&
            Objects.deepEquals(this.additionalMetadata, other.additionalMetadata) &&
            Objects.deepEquals(this.requestBody, other.requestBody);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            petId,
            additionalMetadata,
            requestBody);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UploadFileRequest.class,
                "petId", petId,
                "additionalMetadata", additionalMetadata,
                "requestBody", requestBody);
    }
    
    public final static class Builder {
 
        private Long petId;
 
        private Optional<String> additionalMetadata = Optional.empty();
 
        private Optional<? extends byte[]> requestBody = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * ID of pet to update
         */
        public Builder petId(long petId) {
            Utils.checkNotNull(petId, "petId");
            this.petId = petId;
            return this;
        }

        /**
         * Additional Metadata
         */
        public Builder additionalMetadata(String additionalMetadata) {
            Utils.checkNotNull(additionalMetadata, "additionalMetadata");
            this.additionalMetadata = Optional.ofNullable(additionalMetadata);
            return this;
        }

        /**
         * Additional Metadata
         */
        public Builder additionalMetadata(Optional<String> additionalMetadata) {
            Utils.checkNotNull(additionalMetadata, "additionalMetadata");
            this.additionalMetadata = additionalMetadata;
            return this;
        }

        public Builder requestBody(byte[] requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = Optional.ofNullable(requestBody);
            return this;
        }

        public Builder requestBody(Optional<? extends byte[]> requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }
        
        public UploadFileRequest build() {
            return new UploadFileRequest(
                petId,
                additionalMetadata,
                requestBody);
        }
    }
}

