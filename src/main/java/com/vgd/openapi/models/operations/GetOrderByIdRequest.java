/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.vgd.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.vgd.openapi.utils.SpeakeasyMetadata;
import com.vgd.openapi.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class GetOrderByIdRequest {

    /**
     * ID of order that needs to be fetched
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=orderId")
    private long orderId;

    @JsonCreator
    public GetOrderByIdRequest(
            long orderId) {
        Utils.checkNotNull(orderId, "orderId");
        this.orderId = orderId;
    }

    /**
     * ID of order that needs to be fetched
     */
    @JsonIgnore
    public long orderId() {
        return orderId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * ID of order that needs to be fetched
     */
    public GetOrderByIdRequest withOrderId(long orderId) {
        Utils.checkNotNull(orderId, "orderId");
        this.orderId = orderId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetOrderByIdRequest other = (GetOrderByIdRequest) o;
        return 
            Objects.deepEquals(this.orderId, other.orderId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            orderId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetOrderByIdRequest.class,
                "orderId", orderId);
    }
    
    public final static class Builder {
 
        private Long orderId;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * ID of order that needs to be fetched
         */
        public Builder orderId(long orderId) {
            Utils.checkNotNull(orderId, "orderId");
            this.orderId = orderId;
            return this;
        }
        
        public GetOrderByIdRequest build() {
            return new GetOrderByIdRequest(
                orderId);
        }
    }
}

