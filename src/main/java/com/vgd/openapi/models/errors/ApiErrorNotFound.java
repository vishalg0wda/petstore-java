/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.vgd.openapi.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.vgd.openapi.utils.Utils;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;

/**
 * ApiErrorNotFound - Not Found error
 */
@SuppressWarnings("serial")
public class ApiErrorNotFound extends RuntimeException {

    @JsonProperty("status")
    private int status;

    @JsonProperty("error")
    private String error;

    @JsonProperty("code")
    private String code;

    @JsonCreator
    public ApiErrorNotFound(
            @JsonProperty("status") int status,
            @JsonProperty("error") String error,
            @JsonProperty("code") String code) {
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(error, "error");
        Utils.checkNotNull(code, "code");
        this.status = status;
        this.error = error;
        this.code = code;
    }

    public int status(){
        return status;
    }

    public String error(){
        return error;
    }

    public String code(){
        return code;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    public ApiErrorNotFound withStatus(int status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public ApiErrorNotFound withError(String error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    public ApiErrorNotFound withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApiErrorNotFound other = (ApiErrorNotFound) o;
        return
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.error, other.error) &&
            Objects.deepEquals(this.code, other.code);
    }

    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            status,
            error,
            code);
    }

    @Override
    public String toString() {
        return Utils.toString(ApiErrorNotFound.class,
                "status", status,
                "error", error,
                "code", code);
    }

    public final static class Builder {

        private Integer status;

        private String error;

        private String code;

        private Builder() {
          // force use of static builder() method
        }

        public Builder status(int status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder error(String error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }

        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        public ApiErrorNotFound build() {
            return new ApiErrorNotFound(
                status,
                error,
                code);
        }
    }
}
