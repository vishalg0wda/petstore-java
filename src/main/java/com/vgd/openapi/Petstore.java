/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.vgd.openapi;

import com.fasterxml.jackson.annotation.JsonValue;
import com.vgd.openapi.models.operations.SDKMethodInterfaces.*;
import com.vgd.openapi.utils.HTTPClient;
import com.vgd.openapi.utils.RetryConfig;
import com.vgd.openapi.utils.SpeakeasyHTTPClient;
import com.vgd.openapi.utils.Utils;
import java.lang.String;
import java.util.Map;
import java.util.Optional;

/**
 * Petstore - OpenAPI 3.1: This is a sample Pet Store Server based on the OpenAPI 3.1 specification.
 * 
 * Some useful links:
 * - [OpenAPI Reference](https://www.speakeasy.com/openapi)
 * - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
 * - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 * http://swagger.io - Find out more about Swagger
 */
public class Petstore {


    /**
     * SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] SERVERS = {
        /**
         * A per-environment API.
         */
        "https://{environment}.petstore.io",
    };

    /**
     * Everything about your Pets
     * http://swagger.io - Find out more
     */
    private final Pet pet;

    /**
     * Access to Petstore orders
     * http://swagger.io - Find out more about our store
     */
    private final Store store;

    /**
     * Operations about user
     */
    private final User user;

    /**
     * Everything about your Pets
     * http://swagger.io - Find out more
     */
    public Pet pet() {
        return pet;
    }

    /**
     * Access to Petstore orders
     * http://swagger.io - Find out more about our store
     */
    public Store store() {
        return store;
    }

    /**
     * Operations about user
     */
    public User user() {
        return user;
    }

    private final SDKConfiguration sdkConfiguration;

    /**
     * The Builder class allows the configuration of a new instance of the SDK.
     */
    public static class Builder {

        private final SDKConfiguration sdkConfiguration = new SDKConfiguration();

        private Builder() {
        }

        /**
         * Allows the default HTTP client to be overridden with a custom implementation.
         *
         * @param client The HTTP client to use for all requests.
         * @return The builder instance.
         */
        public Builder client(HTTPClient client) {
            this.sdkConfiguration.defaultClient = client;
            return this;
        }
        /**
         * Configures the SDK security to use the provided secret.
         *
         * @param apiKey The secret to use for all requests.
         * @return The builder instance.
         */
        public Builder apiKey(String apiKey) {
            this.sdkConfiguration.securitySource = SecuritySource.of(com.vgd.openapi.models.components.Security.builder()
              .apiKey(apiKey)
              .build());
            return this;
        }

        /**
         * Configures the SDK to use a custom security source.
         * @param securitySource The security source to use for all requests.
         * @return The builder instance.
         */
        public Builder securitySource(SecuritySource securitySource) {
            this.sdkConfiguration.securitySource = securitySource;
            return this;
        }
        
        /**
         * Overrides the default server URL.
         *
         * @param serverUrl The server URL to use for all requests.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl) {
            this.sdkConfiguration.serverUrl = serverUrl;
            return this;
        }

        /**
         * Overrides the default server URL  with a templated URL populated with the provided parameters.
         *
         * @param serverUrl The server URL to use for all requests.
         * @param params The parameters to use when templating the URL.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl, Map<String, String> params) {
            this.sdkConfiguration.serverUrl = Utils.templateUrl(serverUrl, params);
            return this;
        }
        
        /**
         * Overrides the default server by index.
         *
         * @param serverIdx The server to use for all requests.
         * @return The builder instance.
         */
        public Builder serverIndex(int serverIdx) {
            this.sdkConfiguration.serverIdx = serverIdx;
            this.sdkConfiguration.serverUrl = SERVERS[serverIdx];
            return this;
        }
        
        /**
         * Overrides the default configuration for retries
         *
         * @param retryConfig The retry configuration to use for all requests.
         * @return The builder instance.
         */
        public Builder retryConfig(RetryConfig retryConfig) {
            this.sdkConfiguration.retryConfig = Optional.of(retryConfig);
            return this;
        }
        /**
         * ServerEnvironment - The environment name. Defaults to the production environment.
         */
        public enum ServerEnvironment {
            PROD("prod"),
            STAGING("staging"),
            DEV("dev");

            @JsonValue    
            private final String value;

            private ServerEnvironment(String value) {
                this.value = value;
            }

            public String value() {
                return value;
            }
        }
        /**
         * Sets the environment variable for url substitution.
         *
         * @param environment The value to set.
         * @return The builder instance.
         */
        public Builder environment(ServerEnvironment environment) {
            for (Map<String, String> server : this.sdkConfiguration.serverDefaults) {
                if (!server.containsKey("environment")) {
                    continue;
                }
                server.put("environment", environment.toString());
            }

            return this;
        }
        
        /**
         * Builds a new instance of the SDK.
         * @return The SDK instance.
         */
        public Petstore build() {
            if (sdkConfiguration.defaultClient == null) {
                sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
            }
	        if (sdkConfiguration.securitySource == null) {
	    	    sdkConfiguration.securitySource = SecuritySource.of(null);
	        }
            if (sdkConfiguration.serverUrl == null || sdkConfiguration.serverUrl.isBlank()) {
                sdkConfiguration.serverUrl = SERVERS[0];
                sdkConfiguration.serverIdx = 0;
            }
            if (sdkConfiguration.serverUrl.endsWith("/")) {
                sdkConfiguration.serverUrl = sdkConfiguration.serverUrl.substring(0, sdkConfiguration.serverUrl.length() - 1);
            }
            return new Petstore(sdkConfiguration);
        }
    }
    
    /**
     * Get a new instance of the SDK builder to configure a new instance of the SDK.
     * @return The SDK builder instance.
     */
    public static Builder builder() {
        return new Builder();
    }

    private Petstore(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.pet = new Pet(sdkConfiguration);
        this.store = new Store(sdkConfiguration);
        this.user = new User(sdkConfiguration);
        this.sdkConfiguration.initialize();
    }}
